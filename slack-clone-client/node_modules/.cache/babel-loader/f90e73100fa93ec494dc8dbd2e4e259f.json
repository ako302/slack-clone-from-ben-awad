{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/ako/workspace/ben-awad-tutorial/slack-clone-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ako/workspace/ben-awad-tutorial/slack-clone-client/src/routes/Home.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    allUsers {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/* eslint-disable implicit-arrow-linebreak */\nimport React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n\nconst Home = ({\n  data: loading,\n  allUsers\n}) => loading ? null : allUsers.map(user => React.createElement(\"h1\", {\n  key: user.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, user.email));\n\nconst allUsersQuery = gql(_templateObject());\nexport default (() => {\n  return React.createElement(Query, {\n    query: allUsersQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, Home);\n});","map":{"version":3,"sources":["/Users/ako/workspace/ben-awad-tutorial/slack-clone-client/src/routes/Home.js"],"names":["React","gql","Query","Home","data","loading","allUsers","map","user","id","email","allUsersQuery"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAEC,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KACXD,OAAO,GAAG,IAAH,GAAUC,QAAQ,CAACC,GAAT,CAAaC,IAAI,IAAI;AAAI,EAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAmBD,IAAI,CAACE,KAAxB,CAArB,CADnB;;AAGA,MAAMC,aAAa,GAAGV,GAAH,mBAAnB;AASA,gBAAe,MAAM;AACnB,SAAO,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEU,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BR,IAA9B,CAAP;AACD,CAFD","sourcesContent":["/* eslint-disable implicit-arrow-linebreak */\nimport React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n\nconst Home = ({ data: loading, allUsers }) =>\n  loading ? null : allUsers.map(user => <h1 key={user.id}>{user.email}</h1>);\n\nconst allUsersQuery = gql`\n  {\n    allUsers {\n      id\n      email\n    }\n  }\n`;\n\nexport default () => {\n  return <Query query={allUsersQuery}>{Home}</Query>;\n};\n"]},"metadata":{},"sourceType":"module"}